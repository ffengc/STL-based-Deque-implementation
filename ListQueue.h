#pragma once



#include"MyVector.h"
#include"MyList.h"
#include<initializer_list>
#include<vector>
#include<algorithm>

//ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½
template<class Type, class Cmp>
struct ListQueue;

template<class Type, class Ref, class Ptr, class Cmp>
struct __list_queue_iterator
{
public:
	//Îªï¿½ï¿½Í¨ï¿½ï¿½STLï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¼ï¿½ï¿½ -- ï¿½ï¿½ï¿½ï¿½ï¿½â¼¸ï¿½ä»°
	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç¾Í¿ï¿½ï¿½Ô°ï¿½ListQueueÒ²ï¿½ï¿½ï¿½ï¿½stlï¿½Ä²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ã·¨ï¿½ï¿½ï¿½ï¿½
	typedef bidirectional_iterator_tag iterator_category;
	typedef Type value_type;
	typedef Ptr pointer;
	typedef Ref reference;
	typedef ptrdiff_t difference_type;
private:
	ListQueue<Type, Cmp>* __ptr;
	size_t __pos;
public:
	__list_queue_iterator(ListQueue<Type, Cmp>* ptr, size_t pos)
		:__ptr(ptr), __pos(pos) {}
public:
	//ï¿½ï¿½ï¿½Æºï¿½ï¿½Äµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îª
	//ï¿½ï¿½ï¿½ï¿½!=/==
	bool operator!=(const __list_queue_iterator& lqit)
	{
		return __ptr != lqit.__ptr || __pos != lqit.__pos;
	}
	bool operator==(const __list_queue_iterator& lqit)
	{
		return __ptr == lqit.__ptr && __pos == lqit.__pos;
	}
	//ï¿½ï¿½ï¿½Ø½ï¿½ï¿½ï¿½ï¿½ï¿½
	Ref operator*()
	{
		return __ptr->operator[](__pos);
	}
	Ptr operator->()
	{
		return &(operator*());
	}
	//ï¿½ï¿½ï¿½ï¿½Ç°ï¿½ï¿½++/--
	__list_queue_iterator& operator++()
	{
		__pos++;
		return *this;
	}
	__list_queue_iterator& operator--()
	{
		__pos--;
		return *this;
	}
	//ï¿½ï¿½ï¿½Øºï¿½ï¿½ï¿½++/--
	__list_queue_iterator operator++(int)
	{
		//ï¿½È±ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ö®Ç°ï¿½ï¿½Öµ
		__list_queue_iterator tmp(*this);
		__pos++;
		return tmp;
	}
	__list_queue_iterator operator--(int)
	{
		//ï¿½È±ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ö®Ç°ï¿½ï¿½Öµ
		__list_queue_iterator tmp(*this);
		__pos--;
		return tmp;
	}
	//ï¿½ï¿½ï¿½ï¿½+/-
	__list_queue_iterator operator+(size_t n)
	{
		__list_queue_iterator tmp(*this);
		tmp.__pos += n;
		return tmp;
	}
	__list_queue_iterator operator-(size_t n)
	{
		__list_queue_iterator tmp(*this);
		tmp.__pos -= n;
		return tmp;
	}
};


//ï¿½ï¿½×°ListQueueï¿½ï¿½
#define VECTOR_MAX_CAPACITY 3 //ï¿½æ¶¨Ã¿ï¿½ï¿½vectorÖ»ï¿½Ü´ï¿½ VECTOR_MAX_CAPACITY ï¿½ï¿½Ôªï¿½ï¿½
template<class Type = int, class Cmp = less<Type>>
struct ListQueue
{
private:
	Mylist<MyVector<Type>> __inner_list;
	size_t __nodes_count = 0;
	size_t __size = 0;
public:
	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	typedef __list_queue_iterator<Type, Type&, Type*, Cmp> iterator;
	typedef __list_queue_iterator<Type, const Type&, const Type*, Cmp> const_iterator;
	iterator begin()
	{
		return iterator(this, 0);
	}
	iterator end()
	{
		return iterator(this, __size);
	}
	const_iterator begin() const
	{
		return const_iterator(this, 0);
	}
	const_iterator end() const
	{
		return const_iterator(this, __size);
	}
public:
	ListQueue() = default;//ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í»ï¿½È¥ï¿½ï¿½ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½Ä¹ï¿½ï¿½ìº¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½ï¿½
	ListQueue(const ListQueue& lq)
	{
		__nodes_count = lq.__nodes_count;
		__size = lq.__size;
		__inner_list = lq.__inner_list;
	}
	~ListQueue() = default;//ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í»ï¿½È¥ï¿½ï¿½ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½ï¿½
public:
	//Ö§ï¿½Ö³ï¿½Ê¼ï¿½ï¿½ï¿½Ð±ï¿½ï¿½ï¿½ï¿½ÍµÄ¹ï¿½ï¿½ï¿½
	ListQueue(const initializer_list<Type>& list)
	{
		for (const auto& e : list)
		{
			this->push_back(e);
		}
	}
	//Ö§ï¿½Öµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¹ï¿½ï¿½ï¿?
	template<class InputIterator>
	ListQueue(InputIterator begin, InputIterator end)
	{
		while (begin != end)
		{
			this->push_back(*begin);
			begin++;
		}
	}
public:
	//Î²ï¿½ï¿½
	void push_back(const Type& x)
	{
		if (__nodes_count == 0 || __inner_list[__nodes_count - 1].size() == VECTOR_MAX_CAPACITY)
		{
			//ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Úµï¿½ï¿½ï¿½ï¿½ï¿? -- Ò»ï¿½ï¿½Ê¼Ã»ï¿½Ð½Úµï¿½/ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Úµï¿½ï¿½vectorï¿½ï¿½ï¿½ï¿½
			__nodes_count++;
			__inner_list.push_back(MyVector<Type>());
			//__inner_list[__nodes_count - 1];//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Úµï¿½
			__inner_list[__nodes_count - 1].push_back(x);
			__size++;
		}
		else
		{
			__inner_list[__nodes_count - 1].push_back(x);
			__size++;
		}
	}
	//Î²É¾
	void pop_back()
	{
		assert(__nodes_count);
		assert(__size);
		assert(__inner_list[__nodes_count - 1].size() != 0);//ï¿½ï¿½ï¿½ï¿½ï¿½Ü³ï¿½ï¿½Ö¿Õ½Úµï¿½ï¿½ï¿½ï¿½ï¿½
		__size--;
		__inner_list[__nodes_count - 1].pop_back();//ï¿½ï¿½ï¿½Ò»ï¿½ï¿½vectorï¿½ï¿½pop
		//ï¿½ï¿½ï¿½ï¿½popÖ®ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÒªÉ¾ï¿½ï¿½ï¿½Úµï¿?
		if (__inner_list[__nodes_count - 1].size() == 0)
		{
			//ï¿½ï¿½Ê±ï¿½ï¿½ÒªÉ¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Úµï¿?
			__inner_list.pop_back();
			__nodes_count--;
		}
	}
	//Í·ï¿½ï¿½
	void push_front(const Type& x)
	{
		//ï¿½ï¿½ï¿½ï¿½insert
		this->insert(0, x);
	}
	//Í·É¾
	void pop_front()
	{
		this->erase(0);
	}
	//ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã²ï¿½ï¿½ï¿½
	void insert(size_t pos, const Type& x)
	{
		if (pos == __size)
		{
			this->push_back(x);
			return;
		}
		assert(pos >= 0 && pos < __size);
		//ï¿½ï¿½ï¿½Â±ï¿½Îªposï¿½ï¿½Ôªï¿½ï¿½Ö®Ç°ï¿½ï¿½ï¿½ï¿½
		//ï¿½ï¿½ï¿½Òµï¿½posï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½vectorï¿½ï¿½
		size_t cur_sum = 0;
		size_t i = 0;
		for (i = 0; i < __inner_list.size(); i++)
		{
			if (cur_sum + __inner_list[i].size() > pos)break;
			cur_sum += __inner_list[i].size();
		}
		//ï¿½ï¿½Ê±ï¿½ï¿½iï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Òµï¿½Òªï¿½ï¿½ï¿½ï¿½ï¿½vectorï¿½ï¿½Î»ï¿½ï¿½
		if (__inner_list[i].size() == VECTOR_MAX_CAPACITY)
		{
			//ï¿½ï¿½Ê±Òªï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Úµï¿?(ï¿½ï¿½ï¿½ï¿½Ï¸ï¿½ï¿½ï¿?)
			size_t res_idx = pos - cur_sum;//Ê£ï¿½Âµï¿½ï¿½Â±ï¿½
			__inner_list[i].insert(__inner_list[i].begin() + res_idx, x);
			__size++;
			//ï¿½ï¿½Ê±ï¿½ï¿½Î»ï¿½ï¿½iï¿½Âµï¿½vectorÓ¦ï¿½ï¿½ï¿½Ñ¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Þ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			//ï¿½ï¿½ï¿½iÎ»ï¿½Ãºï¿½ï¿½ï¿½ï¿½vectorï¿½ï¿½ï¿½ï¿½ -- ï¿½ï¿½ï¿½ï¿½ï¿½Â½Úµã£¬ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ëµ½ï¿½ï¿½ï¿½ï¿½ï¿½vectorï¿½ï¿½È¥
			//ï¿½ï¿½ï¿½iÎ»ï¿½Ãºï¿½ï¿½ï¿½Ã»ï¿½ï¿½vectorï¿½ï¿½ -- ï¿½ï¿½ï¿½ï¿½ï¿½Â½Úµï¿½
			if (i == __inner_list.size() - 1 || __inner_list[i + 1].size() == VECTOR_MAX_CAPACITY)
			{
				//ï¿½ï¿½iÎ»ï¿½ÃµÄºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä½Úµï¿½ -- ï¿½ï¿½iï¿½Â±ï¿½ï¿½vectorï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ôªï¿½Ø·Å¹ï¿½È?
				__inner_list.insert(__inner_list.begin() + i + 1, MyVector<Type>());
				__nodes_count++;
				__inner_list[i + 1].push_back(__inner_list[i][VECTOR_MAX_CAPACITY]);
				__inner_list[i].pop_back();
			}
			else
			{
				//Í·ï¿½åµ½ï¿½ï¿½ï¿½ï¿½ï¿½vectorï¿½ï¿½È¥
				__inner_list[i + 1].insert(__inner_list[i + 1].begin(),
					__inner_list[i][VECTOR_MAX_CAPACITY]);//ï¿½Ñ³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç¸ï¿½vectorï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ôªï¿½ï¿½Í·ï¿½åµ½ï¿½ï¿½ï¿½ï¿½ï¿½vectorï¿½ï¿½È¥
				__inner_list[i].pop_back();//Í¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç¸ï¿½vector popÒ»ï¿½ï¿½
			}
		}
		else
		{
			size_t res_idx = pos - cur_sum;//Ê£ï¿½Âµï¿½ï¿½Â±ï¿½
			__inner_list[i].insert(__inner_list[i].begin() + res_idx, x);
			__size++;
		}
	}
	//ï¿½ï¿½ï¿½ï¿½Î»ï¿½ï¿½É¾ï¿½ï¿½
	void erase(size_t pos)
	{
		assert(pos >= 0 && pos < __size);
		__size--;
		//É¾ï¿½ï¿½ï¿½Â±ï¿½ÎªposÎ»ï¿½Ãµï¿½Öµ
		//ï¿½ï¿½ï¿½Òµï¿½posï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½vectorï¿½ï¿½
		size_t cur_sum = 0;
		size_t i = 0;
		for (i = 0; i < __inner_list.size(); i++)
		{
			if (cur_sum + __inner_list[i].size() > pos)break;
			cur_sum += __inner_list[i].size();
		}
		//ï¿½ï¿½Ê±ï¿½ï¿½iï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Òµï¿½ÒªÉ¾ï¿½ï¿½vectorï¿½ï¿½Î»ï¿½ï¿½
		//ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â±ï¿½Îªiï¿½ï¿½Î»ï¿½Ãµï¿½vectorï¿½ï¿½sizeï¿½ï¿½Ó¦ï¿½ï¿½Îª0ï¿½ï¿½ï¿½ï¿½ï¿½Î?0ï¿½ï¿½Ëµï¿½ï¿½Ç°ï¿½ï¿½ï¿½ï¿½ß¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
		assert(__inner_list[i].size());
		size_t res_idx = pos - cur_sum;//ï¿½ï¿½vectorï¿½Ð£ï¿½Ä¿ï¿½ï¿½Ôªï¿½Øµï¿½ï¿½Â±ï¿½
		__inner_list[i].erase(__inner_list[i].begin() + res_idx);
		//ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½Â±ï¿½Îªiï¿½ï¿½vectorï¿½ï¿½É¾ï¿½ï¿½ï¿½ï¿½ -- ï¿½ï¿½Ê±ï¿½ï¿½ÒªÉ¾ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä½Úµï¿½
		if (__inner_list[i].size() == 0)
		{
			__inner_list.erase(__inner_list.begin() + i);
			__nodes_count--;
		}
	}
	//[]ï¿½ï¿½ï¿½ï¿½
	Type& operator[](size_t pos)
	{
		assert(pos >= 0 && pos < __size);
		//ï¿½Òµï¿½ï¿½Â±ï¿½ÎªposÎ»ï¿½Ãµï¿½Öµ
		//ï¿½ï¿½ï¿½Òµï¿½posï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½vectorï¿½ï¿½
		size_t cur_sum = 0;
		size_t i = 0;
		for (i = 0; i < __inner_list.size(); i++)
		{
			if (cur_sum + __inner_list[i].size() > pos)break;
			cur_sum += __inner_list[i].size();
		}
		size_t res_idx = pos - cur_sum;//ï¿½ï¿½vectorï¿½Ð£ï¿½Ä¿ï¿½ï¿½Ôªï¿½Øµï¿½ï¿½Â±ï¿½
		return __inner_list[i][res_idx];
	}
	//ï¿½ï¿½ï¿½ï¿½ -- ï¿½ï¿½ï¿½ï¿½ï¿½Ç±ï¿½ï¿½ï¿½ï¿? -- ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½eraseÊ¹ï¿½ï¿½ -- É¾ï¿½ï¿½ï¿½ï¿½Ò»ï¿½Î³ï¿½ï¿½Öµï¿½x
	size_t find(const Type& x)
	{
		for (size_t i = 0; i < __size; i++)
		{
			if (this->operator[](i) == x)
			{
				return i;
			}
		}
	}
	//ï¿½ï¿½ï¿½ï¿½
	void sort()
	{
		vector<Type>arr;
		for (size_t i = 0; i < __size; i++)
		{
			arr.push_back(this->operator[](i));
		}
		std::sort(arr.begin(), arr.end(), Cmp());
		this->clear();
		for (const auto& e : arr)
		{
			this->push_back(e);
		}
	}
	//ï¿½ï¿½ï¿½ï¿½
	void clear()
	{
		__inner_list.clear();
		__nodes_count = __size = 0;
	}
public:
	size_t size()
	{
		return __size;
	}
public:
	void print() // Õ¹Ê¾ï¿½Ú²ï¿½ï¿½ï¿½Ï¢
	{
		cout << "curent list info: ";
		this->output(); cout << endl;
		cout << "curent detail info: " << endl;
		for (size_t i = 0; i < __inner_list.size(); i++)
		{
			cout << "Nodes[" << i << "] " << "Size: " << __inner_list[i].size() << " --> ";
			for (size_t j = 0; j < __inner_list[i].size(); j++)
			{
				cout << __inner_list[i][j] << " ";
			}
			cout << endl;
		}
		cout << endl << "other info: " << endl;
		cout << "NodesNumber: " << __inner_list.size() << endl;
		cout << "Element Size: " << __size << endl;
	}
public:
	//ï¿½ï¿½ï¿½ï¿½ï¿½Ã½Ó¿ï¿½ -- ï¿½ï¿½ï¿½Ô²ï¿½ï¿½ï¿½×°ï¿½ï¿½ï¿½Ö®ï¿½ï¿½mï¿½ï¿½ï¿½ï¿½ÎªË½ï¿½ï¿½
	void output()
	{
		for (size_t i = 0; i < __inner_list.size(); i++)
		{
			for (size_t j = 0; j < __inner_list[i].size(); j++)
			{
				cout << __inner_list[i][j] << " ";
			}
		}
		cout << endl;
	}
	void output_detail()
	{
		for (size_t i = 0; i < __inner_list.size(); i++)
		{
			for (size_t j = 0; j < __inner_list[i].size(); j++)
			{
				cout << __inner_list[i][j] << " ";
			}
			cout << endl;
		}
		cout << endl;
	}
};